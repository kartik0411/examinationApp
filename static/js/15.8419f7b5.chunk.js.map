{"version":3,"file":"static/js/15.8419f7b5.chunk.js","mappings":"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","sources":["axiosConfig.js","pages/StudentPages/ExamQuestionsPage/ExamQuestions.jsx"],"sourcesContent":["import axios from \"axios\";\r\nimport { API_BASE_URL } from \"./constants/constants\";\r\n\r\n// Create an instance of Axios\r\nconst instance = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  headers: {\r\n    \"Content-Type\": \"application/json\",\r\n  },\r\n});\r\nconst token = JSON.parse(localStorage.getItem(\"token\"));\r\n\r\n// Add a request interceptor\r\ninstance.interceptors.request.use(\r\n  (config) => {\r\n    // Modify the request config here, such as adding headers\r\n    if (token) {\r\n      config.headers.authorization = token;\r\n    }\r\n    config.headers[\"Access-Control-Allow-Origin\"] = \"*\";\r\n    return config;\r\n  },\r\n  (error) => {\r\n    // Do something with the request error\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Add a response interceptor\r\ninstance.interceptors.response.use(\r\n  (response) => {\r\n    // Do something with the response data\r\n    return response;\r\n  },\r\n  (error) => {\r\n    // Do something with the response error\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default instance;\r\n","import {\r\n  Button,\r\n  Col,\r\n  Row,\r\n  Card,\r\n  Radio,\r\n  Divider,\r\n  Watermark,\r\n  Statistic,\r\n  Form,\r\n} from \"antd\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nimport SubmitButton from \"../../../components/Buttons/SubmitButton\";\r\nimport axios from \"../../../axiosConfig\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { SET_TOAST_STATE } from \"../../../constants/constants\";\r\n\r\nfunction ExamQuestions() {\r\n  const { Countdown } = Statistic;\r\n  const navigate = useNavigate();\r\n  const dispatch = useDispatch();\r\n  const [questions, setQuestions] = useState();\r\n  const [answers, setAnswers] = useState([]);\r\n  const [answering, setAnswering] = useState(false);\r\n  const [submits, setSubmits] = useState(false);\r\n  const [answeredques, setAnsweredques] = useState();\r\n  const [timeLeft, setTimeLeft] = useState(-1);\r\n  const { state } = useLocation();\r\n  const [isDBDA, setIsDBDA] = useState(false);\r\n  const [answersStatus, setAnswersStatus] = useState(new Map());\r\n  const [colour, setColour] = useState(true);\r\n  const goNext = () => {};\r\n  const goPrevious = () => {};\r\n\r\n\r\n\r\n  const fetchMBtiQuestions = async () => { \r\n    const { data } = await axios.get(\"/questionsForExam/\"+state.studentId+\"/\"+state.examId);\r\n    if(data?.dbdaId && data?.dbdaId!=\"\") {\r\n      setIsDBDA(true);\r\n    }\r\n    if(data?.timer) {\r\n        setTimeLeft(parseInt(data?.duration));\r\n     } \r\n    let answersarray = [];\r\n    let ansstatus = new Map();\r\n    for(let i=0;i<data?.questions.length;i++) {\r\n      if(data.questions[i].optionSelected && data.questions[i].optionSelected!=0) {\r\n        ansstatus.set(i+1,true);\r\n      } else {\r\n        ansstatus.set(i+1,false);\r\n      }\r\n      answersarray.push(data.questions[i].optionSelected);\r\n    }\r\n    setAnswersStatus(ansstatus);\r\n    setAnsweredques(data?.answeredques);\r\n    setAnswers(answersarray);\r\n    console.log(\"aagya daTA VBC\"+JSON.stringify(data));\r\n    setQuestions(data);\r\n    if(isDBDA || data?.answeredques===data?.questions.length) {\r\n      setSubmits(true);\r\n    } else {\r\n      setSubmits(false);\r\n    }\r\n  };\r\n\r\n  useEffect(()=> {\r\n\r\n    if(timeLeft==0) {\r\n      setAnswering(false);\r\n    }\r\n    else if(timeLeft>0) {\r\n      setTimeout(function () {\r\n       setTimeLeft(timeLeft-1);\r\n      }, 1000);\r\n      setAnswering(true);\r\n    }\r\n    else {\r\n      setAnswering(true);\r\n    }\r\n  }, [timeLeft])\r\n\r\n  useEffect(() => {\r\n    fetchMBtiQuestions();\r\n  }, []);\r\n\r\n  useEffect(() => { \r\n    if(isDBDA || answeredques===questions?.questions.length) { \r\n      setSubmits(true);\r\n    } else {\r\n      setSubmits(false);\r\n    }\r\n  }, [answeredques]);\r\n\r\n  const selectedOption = async (e, _id, questionNumber) => {\r\n    let liveResponse = {studentId: state.studentId, examId: state.examId, questionId: _id, option: e.target.value}\r\n    await axios.post(\"/liveresponse\",liveResponse);\r\n    if(answers[questionNumber]==0) {  \r\n      setAnsweredques(answeredques+1);\r\n    }\r\n    let answerss = [];\r\n    Object.assign(answerss,answers);\r\n    answerss[questionNumber] = e.target.value;\r\n    setAnswers(answerss);\r\n    let ansstatus = answersStatus;\r\n    ansstatus.set(questionNumber+1,true);\r\n    setAnswersStatus(ansstatus);\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    let submitbody = {studentId: state.studentId,examId: state.examId}\r\n    await axios.post(\"/submitExam\",submitbody);\r\n    let homepagedata = await axios.get(\"getAllTestsExams/\"+state.studentId);\r\n    // answers.sort((a, b) => a.questionNumber - b.questionNumber);\r\n    // if (questions.length !== answers.length) {\r\n    //   console.log(\"golgappa\", questions.length);\r\n    //   dispatch({\r\n    //     type: SET_TOAST_STATE,\r\n    //     payload: {\r\n    //       showToast: true,\r\n    //       message: \"Please anwers all the questions\",\r\n    //       toastType: \"warning\",\r\n    //     },\r\n    //   });\r\n    // } else {\r\n    //   dispatch({ type: \"ANSWER_SUBMITTED\", payload: { answers } });\r\n    //   localStorage.setItem(\"answers\", JSON.stringify(answers));\r\n      navigate(\"/student/exam/preview\",{state: {tests: JSON.parse(JSON.stringify(homepagedata.data))}});\r\n      \r\n\r\n  };\r\n  const handleQuestionSelection = (e) => {\r\n  };\r\n  return (\r\n    <>\r\n      <Row gutter={16} className=\"h-100\"> \r\n        <Col md={16} className=\"p-3\">\r\n          <Card className=\"h-100\">\r\n            <h3 className=\"font-weight-bold text-center\">Questions</h3>\r\n            <hr />\r\n            <Watermark content=\"MYNDKARE EXAMS\">\r\n              {questions && questions?.questions.map((question, index) => (\r\n                <Form.Item key={question._id}>\r\n                  <p className=\"pt-4 px-4\">\r\n                    {index + 1}. {question.name}\r\n                  </p>\r\n                  <Radio.Group\r\n                    name=\"radiogroup\"\r\n                    className=\"p-2 px-5\"\r\n                    onChange={(e) => selectedOption(e, question._id, index)}\r\n                    value={answers[index]}\r\n                  >\r\n                    {question.options.map((option, index) => (\r\n                      <Radio\r\n                        value={index+1}\r\n                        name=\"radio1\"\r\n                        key={option}\r\n                        className=\"my-3\"\r\n                        disabled = {!answering}\r\n                      >\r\n                        <div value={index + 1} className=\"p-2 px-5\">\r\n                        {/* <Divider plain> */}\r\n\r\n                          {/* {option.map((mbtiText, index) => ( */}\r\n                          <p key={option}>{(index + 1)+\". \"+option}</p>\r\n                          {/* ))} */}\r\n                          {/* </Divider> */}\r\n                        </div>\r\n                      </Radio>\r\n                    ))}\r\n                  </Radio.Group>\r\n                  <hr />\r\n                </Form.Item>\r\n              ))}\r\n            </Watermark>\r\n            {/* <center className=\"p-2\">\r\n              <Button className=\"mx-2\" onClick={() => goPrevious()}>\r\n                Previous\r\n              </Button>\r\n              <Button className=\"\" onClick={() => goNext()}>\r\n                Next\r\n              </Button>\r\n            </center> */}\r\n          </Card>\r\n        </Col>\r\n        <Col md={8} className=\"p-3\">\r\n          <Card className=\"h-100\">\r\n            <Row gutter={24} className=\"h-100\">\r\n              <Col md={24}> \r\n                <h3 className=\"font-weight-bold\">{questions?.name}</h3>\r\n                <hr />\r\n              </Col>\r\n              <Col md={24}> \r\n              {timeLeft>=0 && (\r\n                <>\r\n                  <h4 className=\"font-weight-bold\">\r\n                    Time Left : <span style={{ color: 'red' }}>{timeLeft}</span> Seconds\r\n                  </h4>\r\n                  <hr />\r\n                </>\r\n              )}\r\n              </Col>\r\n              <Col md={24}> \r\n                <h5 className=\"font-weight-bold\">Answer Status</h5>\r\n              </Col>\r\n              {questions && questions?.questions.map((question, index) => (\r\n                <Col md={3} key={question._id} className=\"p-2\">\r\n                  <Button\r\n                    shape=\"circle\"\r\n                    value={index + 1} \r\n                    onClick={(e) => handleQuestionSelection(e.target.value)}\r\n                    style={answersStatus.has(index + 1) && answersStatus.get(index + 1)==true && { backgroundColor: 'green', color: 'white' }} // Customize as needed\r\n                    // disabled\r\n                  >\r\n                    {index + 1} \r\n                  </Button>\r\n                </Col>\r\n              ))}\r\n            </Row>\r\n            {/* <Countdown\r\n              title=\"Countdown\"\r\n              value={countdownValue}\r\n              onChange={onChange}\r\n            /> */}\r\n            <div className=\"submit_btn\">\r\n              <Button\r\n                type=\"primary\"\r\n                htmlType=\"submit\"\r\n                onClick={() => handleSubmit()}\r\n                disabled={!submits}\r\n              >\r\n                Submit\r\n              </Button>\r\n            </div>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ExamQuestions;\r\n"],"names":["instance","axios","create","baseURL","API_BASE_URL","headers","token","JSON","parse","localStorage","getItem","interceptors","request","use","config","authorization","error","Promise","reject","response","Statistic","Countdown","navigate","useNavigate","_useState","useDispatch","useState","_useState2","_slicedToArray","questions","setQuestions","_useState3","_useState4","answers","setAnswers","_useState5","_useState6","answering","setAnswering","_useState7","_useState8","submits","setSubmits","_useState9","_useState10","answeredques","setAnsweredques","_useState11","_useState12","timeLeft","setTimeLeft","state","useLocation","_useState13","_useState14","isDBDA","setIsDBDA","_useState15","Map","_useState16","answersStatus","setAnswersStatus","_useState17","_useState18","fetchMBtiQuestions","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_yield$axios$get","data","answersarray","ansstatus","i","wrap","_context","prev","next","get","studentId","examId","sent","dbdaId","timer","parseInt","duration","length","optionSelected","set","push","console","log","stringify","stop","apply","arguments","useEffect","setTimeout","selectedOption","_ref2","_callee2","e","_id","questionNumber","liveResponse","answerss","_context2","questionId","option","target","value","post","Object","assign","_x","_x2","_x3","handleSubmit","_ref3","_callee3","submitbody","homepagedata","_context3","tests","_jsx","_Fragment","children","_jsxs","Row","gutter","className","Col","md","Card","Watermark","content","map","question","index","Form","Item","name","Radio","onChange","options","disabled","style","color","Button","shape","onClick","has","backgroundColor","type","htmlType"],"sourceRoot":""}