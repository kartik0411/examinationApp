{"version":3,"file":"static/js/15.09263b77.chunk.js","mappings":"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","sources":["axiosConfig.js","pages/StudentPages/ExamQuestionsPage/ExamQuestions.jsx"],"sourcesContent":["import axios from \"axios\";\r\nimport { API_BASE_URL } from \"./constants/constants\";\r\n\r\n// Create an instance of Axios\r\nconst instance = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  headers: {\r\n    \"Content-Type\": \"application/json\",\r\n  },\r\n});\r\nconst token = JSON.parse(localStorage.getItem(\"token\"));\r\n\r\n// Add a request interceptor\r\ninstance.interceptors.request.use(\r\n  (config) => {\r\n    // Modify the request config here, such as adding headers\r\n    if (token) {\r\n      config.headers.authorization = token;\r\n    }\r\n    config.headers[\"Access-Control-Allow-Origin\"] = \"*\";\r\n    return config;\r\n  },\r\n  (error) => {\r\n    // Do something with the request error\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Add a response interceptor\r\ninstance.interceptors.response.use(\r\n  (response) => {\r\n    // Do something with the response data\r\n    return response;\r\n  },\r\n  (error) => {\r\n    // Do something with the response error\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default instance;\r\n","import {\r\n  Button,\r\n  Col,\r\n  Row,\r\n  Card,\r\n  Radio,\r\n  Divider,\r\n  Watermark,\r\n  Statistic,\r\n  Form,\r\n} from \"antd\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nimport SubmitButton from \"../../../components/Buttons/SubmitButton\";\r\nimport axios from \"../../../axiosConfig\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { SET_TOAST_STATE } from \"../../../constants/constants\";\r\n\r\nfunction ExamQuestions() {\r\n  const { Countdown } = Statistic;\r\n  const navigate = useNavigate();\r\n  const dispatch = useDispatch();\r\n  const [questions, setQuestions] = useState();\r\n  const [answers, setAnswers] = useState([]);\r\n  const [submits, setSubmits] = useState(false);\r\n  const [answeredques, setAnsweredques] = useState();\r\n  const [timer, setTimer] = useState(false);  \r\n  const [timeLeft, setTimeLeft] = useState(-1);\r\n  const { state } = useLocation();\r\n  const [isDBDA, setIsDBDA] = useState(false);\r\n  const [dialogopen, setDialogopen] = useState(false);\r\n  const goNext = () => {};\r\n  const goPrevious = () => {};\r\n\r\n\r\n\r\n  const fetchMBtiQuestions = async () => { \r\n    const { data } = await axios.get(\"/questionsForExam/\"+state.studentId+\"/\"+state.examId);\r\n    if(data?.dbdaId && data?.dbdaId!=\"\") {\r\n      setIsDBDA(true);\r\n    }\r\n    if(data?.timer) {\r\n      console.log(\"ooopsie\")\r\n        setTimer(true);\r\n        setTimeLeft(parseInt(data?.duration));\r\n        console.log(\"ooops\")\r\n      \r\n     } \r\n    let answersarray = [];\r\n    for(let i=0;i<data?.questions.length;i++) {\r\n      answersarray.push(data.questions[i].optionSelected);\r\n    }\r\n    setAnsweredques(data?.answeredques);\r\n    setAnswers(answersarray);\r\n    console.log(\"aagya daTA VBC\"+JSON.stringify(data));\r\n    setQuestions(data);\r\n    if(isDBDA || data?.answeredques===data?.questions.length) {\r\n      setSubmits(true);\r\n    } else {\r\n      setSubmits(false);\r\n    }\r\n  };\r\n\r\n  useEffect(()=> {\r\n\r\n    if(timeLeft==0) {\r\n      console.log(\"yaaaaaahhhhhhhhhhh\");\r\n      // setDialogopen(true);\r\n    }\r\n    else if(timeLeft>0) {\r\n      setTimeout(function () {\r\n                    console.log(\"time left hai \"+timeLeft)\r\n                    let uv = timeLeft-1;\r\n                                console.log(\"time left minus one hai \"+uv)\r\n  \r\n       setTimeLeft(timeLeft-1);\r\n        console.log('Hello world')\r\n      }, 1000)\r\n      \r\n        //ADD LOGIC FOR TIMER\r\n        // setInterval(function() {\r\n        //   // if (timeLeft == 0) {\r\n        //     // console.log(\" submit karne ka time aagya\")\r\n        //     // setQuestions();\r\n        //     // setAnswers([]);\r\n        //     // setSubmits(true);\r\n        //     // setTimer(false);\r\n        //     // setDialogopen(false);\r\n        //     // setTimeLeft();\r\n        //     // setAnsweredques();\r\n        //     // let homepagedata = await axios.get(\"getAllTestsExams/\"+state.studentId);\r\n        //     // navigate(\"/student/exam/preview\",{state: {tests: JSON.parse(JSON.stringify(homepagedata.data))}});\r\n        //   // }\r\n        //   // else { \r\n        //     console.log(\"time left hai \"+timeLeft)\r\n        //     console.log(\"time left minus one hai \"+timeLeft-1)\r\n        //     setTimeLeft(timeLeft-1);\r\n        //     clearInterval(this); \r\n        //   // } \r\n        // }, 1000);\r\n    }\r\n  }, [timeLeft])\r\n\r\n  useEffect(() => {\r\n    fetchMBtiQuestions();\r\n  }, []);\r\n\r\n  useEffect(() => { \r\n    if(isDBDA || answeredques===questions?.questions.length) { \r\n      setSubmits(true);\r\n    } else {\r\n      setSubmits(false);\r\n    }\r\n  }, [answeredques]);\r\n\r\n  const selectedOption = async (e, _id, questionNumber) => {\r\n    console.log(\"bc option hai\"+e.target.value, _id, questionNumber);\r\n    let liveResponse = {studentId: state.studentId, examId: state.examId, questionId: _id, option: e.target.value}\r\n    await axios.post(\"/liveresponse\",liveResponse);\r\n    if(answers[questionNumber]==0) {  \r\n      setAnsweredques(answeredques+1);\r\n    }\r\n    let answerss = [];\r\n    Object.assign(answerss,answers);\r\n    answerss[questionNumber] = e.target.value;\r\n    setAnswers(answerss);\r\n    console.log(\"answers =\"+JSON.stringify(answers)+answeredques+submits);\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    let submitbody = {studentId: state.studentId,examId: state.examId}\r\n    await axios.post(\"/submitExam\",submitbody);\r\n    let homepagedata = await axios.get(\"getAllTestsExams/\"+state.studentId);\r\n    // answers.sort((a, b) => a.questionNumber - b.questionNumber);\r\n    // if (questions.length !== answers.length) {\r\n    //   console.log(\"golgappa\", questions.length);\r\n    //   dispatch({\r\n    //     type: SET_TOAST_STATE,\r\n    //     payload: {\r\n    //       showToast: true,\r\n    //       message: \"Please anwers all the questions\",\r\n    //       toastType: \"warning\",\r\n    //     },\r\n    //   });\r\n    // } else {\r\n    //   dispatch({ type: \"ANSWER_SUBMITTED\", payload: { answers } });\r\n    //   localStorage.setItem(\"answers\", JSON.stringify(answers));\r\n      navigate(\"/student/exam/preview\",{state: {tests: JSON.parse(JSON.stringify(homepagedata.data))}});\r\n      \r\n\r\n  };\r\n  const handleQuestionSelection = (e) => {\r\n    console.log(e);\r\n  };\r\n  return (\r\n    <>\r\n      <Row gutter={16} className=\"h-100\"> \r\n        <Col md={16} className=\"p-3\">\r\n          <Card className=\"h-100\">\r\n            <h3 className=\"font-weight-bold text-center\">Questions</h3>\r\n            <hr />\r\n            <Watermark content=\"MYNDKARE EXAMS\">\r\n              {questions && questions?.questions.map((question, index) => (\r\n                <Form.Item key={question._id}>\r\n                  <p className=\"pt-4 px-4\">\r\n                    {index + 1}. {question.name}\r\n                  </p>\r\n                  <Radio.Group\r\n                    name=\"radiogroup\"\r\n                    className=\"p-2 px-5\"\r\n                    onChange={(e) => selectedOption(e, question._id, index)}\r\n                    value={answers[index]}\r\n                  >\r\n                    {question.options.map((option, index) => (\r\n                      <Radio\r\n                        value={index+1}\r\n                        name=\"radio1\"\r\n                        key={option}\r\n                        className=\"my-3\"\r\n                      >\r\n                        <div value={index + 1} className=\"p-2 px-5\">\r\n                        {/* <Divider plain> */}\r\n\r\n                          {/* {option.map((mbtiText, index) => ( */}\r\n                          <p key={option}>{(index + 1)+\". \"+option}</p>\r\n                          {/* ))} */}\r\n                          {/* </Divider> */}\r\n                        </div>\r\n                      </Radio>\r\n                    ))}\r\n                  </Radio.Group>\r\n                  <hr />\r\n                </Form.Item>\r\n              ))}\r\n            </Watermark>\r\n            {/* <center className=\"p-2\">\r\n              <Button className=\"mx-2\" onClick={() => goPrevious()}>\r\n                Previous\r\n              </Button>\r\n              <Button className=\"\" onClick={() => goNext()}>\r\n                Next\r\n              </Button>\r\n            </center> */}\r\n          </Card>\r\n        </Col>\r\n        <Col md={8} className=\"p-3\">\r\n          <Card className=\"h-100\">\r\n            <Row gutter={24} className=\"h-100\">\r\n              <Col md={24}> \r\n                <h3 className=\"font-weight-bold\">{questions?.name}</h3>\r\n                <hr />\r\n              </Col>\r\n              <Col md={24}> \r\n                <h4 className=\"font-weight-bold\">Time Left : <span style={{ color: 'red' }}>{timeLeft}</span> Seconds</h4>\r\n                <hr />\r\n              </Col>\r\n              <Col md={24}> \r\n                <h5 className=\"font-weight-bold\">Answer Status</h5>\r\n              </Col>\r\n              {questions && questions?.questions.map((question, index) => (\r\n                <Col md={3} key={question._id} className=\"p-2\">\r\n                  <Button\r\n                    shape=\"circle\"\r\n                    value={index + 1} \r\n                    onClick={(e) => handleQuestionSelection(e.target.value)}\r\n                  >\r\n                    {index + 1} \r\n                  </Button>\r\n                </Col>\r\n              ))}\r\n            </Row>\r\n            {/* <Countdown\r\n              title=\"Countdown\"\r\n              value={countdownValue}\r\n              onChange={onChange}\r\n            /> */}\r\n            <div className=\"submit_btn\">\r\n              <Button\r\n                type=\"primary\"\r\n                htmlType=\"submit\"\r\n                onClick={() => handleSubmit()}\r\n                disabled={!submits}\r\n              >\r\n                Submit\r\n              </Button>\r\n            </div>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ExamQuestions;\r\n"],"names":["instance","axios","create","baseURL","API_BASE_URL","headers","token","JSON","parse","localStorage","getItem","interceptors","request","use","config","authorization","error","Promise","reject","response","Statistic","Countdown","navigate","useNavigate","_useState","useDispatch","useState","_useState2","_slicedToArray","questions","setQuestions","_useState3","_useState4","answers","setAnswers","_useState5","_useState6","submits","setSubmits","_useState7","_useState8","answeredques","setAnsweredques","_useState9","_useState10","setTimer","_useState11","_useState12","timeLeft","setTimeLeft","state","useLocation","_useState13","_useState14","isDBDA","setIsDBDA","_useState15","_useState16","fetchMBtiQuestions","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_yield$axios$get","data","answersarray","i","wrap","_context","prev","next","get","studentId","examId","sent","dbdaId","timer","console","log","parseInt","duration","length","push","optionSelected","stringify","stop","apply","arguments","useEffect","setTimeout","uv","selectedOption","_ref2","_callee2","e","_id","questionNumber","liveResponse","answerss","_context2","target","value","questionId","option","post","Object","assign","_x","_x2","_x3","handleSubmit","_ref3","_callee3","submitbody","homepagedata","_context3","tests","_jsx","_Fragment","children","_jsxs","Row","gutter","className","Col","md","Card","Watermark","content","map","question","index","Form","Item","name","Radio","onChange","options","style","color","Button","shape","onClick","handleQuestionSelection","type","htmlType","disabled"],"sourceRoot":""}