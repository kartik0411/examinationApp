{"version":3,"file":"static/js/15.cbddb5b7.chunk.js","mappings":"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","sources":["axiosConfig.js","pages/StudentPages/ExamQuestionsPage/ExamQuestions.jsx"],"sourcesContent":["import axios from \"axios\";\nimport { API_BASE_URL } from \"./constants/constants\";\n\n// Create an instance of Axios\nconst instance = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n});\nconst token = JSON.parse(localStorage.getItem(\"token\"));\n\n// Add a request interceptor\ninstance.interceptors.request.use(\n  (config) => {\n    // Modify the request config here, such as adding headers\n    if (token) {\n      config.headers.authorization = token;\n    }\n    config.headers[\"Access-Control-Allow-Origin\"] = \"*\";\n    return config;\n  },\n  (error) => {\n    // Do something with the request error\n    return Promise.reject(error);\n  }\n);\n\n// Add a response interceptor\ninstance.interceptors.response.use(\n  (response) => {\n    // Do something with the response data\n    return response;\n  },\n  (error) => {\n    // Do something with the response error\n    return Promise.reject(error);\n  }\n);\n\nexport default instance;\n","import {\n  Button,\n  Col,\n  Row,\n  Card,\n  Radio,\n  Divider,\n  Watermark,\n  Statistic,\n  Form,\n} from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport { useLocation } from \"react-router-dom\";\n\nimport SubmitButton from \"../../../components/Buttons/SubmitButton\";\nimport axios from \"../../../axiosConfig\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useDispatch } from \"react-redux\";\nimport { SET_TOAST_STATE } from \"../../../constants/constants\";\n\nfunction ExamQuestions() {\n  const { Countdown } = Statistic;\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const [mbtiQuestions, setMbtiQuestions] = useState();\n  const [answers, setAnswers] = useState([]);\n  const [submits, setSubmits] = useState(false);\n  const [answeredques, setAnsweredques] = useState();\n  // const countdownValue = Date.now() + 210000;\n  const { state } = useLocation();\n  const goNext = () => {};\n  const goPrevious = () => {};\n  // const onChange = (val) => {\n  //   if (typeof val === \"number\" && 4.95 * 1000 < val && val < 5 * 1000) {\n  //     console.log(\"changed!\");\n  //   }\n  // };\n\n\n\n  const fetchMBtiQuestions = async () => { \n    const { data } = await axios.get(\"/questionsForExam/\"+state.studentId+\"/\"+state.examId);\n    let answersarray = [];\n    for(let i=0;i<data?.questions.length;i++) {\n      answersarray.push(data.questions[i].optionSelected);\n    }\n    setAnsweredques(data?.answeredques);\n    setAnswers(answersarray);\n    console.log(\"aagya daTA VBC\"+JSON.stringify(data));\n    setMbtiQuestions(data);\n    if(data?.answeredques===data?.questions.length) {\n      setSubmits(true);\n    } else {\n      setSubmits(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchMBtiQuestions();\n  }, []);\n\n  useEffect(() => {\n    if(answeredques===mbtiQuestions?.questions.length) {\n      setSubmits(true);\n    } else {\n      setSubmits(false);\n    }\n  }, [answeredques]);\n\n  const selectedOption = async (e, _id, questionNumber) => {\n    console.log(\"bc option hai\"+e.target.value, _id, questionNumber);\n    let liveResponse = {studentId: state.studentId, examId: state.examId, questionId: _id, option: e.target.value}\n    await axios.post(\"/liveresponse\",liveResponse);\n    if(answers[questionNumber]==0) {\n      setAnsweredques(answeredques+1);\n    }\n    let answerss = [];\n    Object.assign(answerss,answers);\n    answerss[questionNumber] = e.target.value;\n    setAnswers(answerss);\n    console.log(\"answers =\"+JSON.stringify(answers)+answeredques+submits);\n    // setAnswers((prev) => {\n    //   const isDifferentQuestion = !prev.some(\n    //     (previousAnswer) => previousAnswer.questionNumber === questionNumber\n    //   );\n    //   if (isDifferentQuestion) {\n    //     return [\n    //       ...prev,\n    //       {\n    //         value: e.target.value,\n    //         id: _id,\n    //         questionNumber,\n    //       },\n    //     ];\n    //   } else {\n    //     return prev.map((previousAnswer) =>\n    //       previousAnswer.questionNumber === questionNumber\n    //         ? { ...previousAnswer, value: e.target.value }\n    //         : previousAnswer\n    //     );\n    //   }\n    // });\n  };\n\n  const handleSubmit = async () => {\n    let submitbody = {studentId: state.studentId,examId: state.examId}\n    await axios.post(\"/submitExam\",submitbody);\n    let homepagedata = await axios.get(\"getAllTestsExams/\"+state.studentId);\n    // answers.sort((a, b) => a.questionNumber - b.questionNumber);\n    // if (mbtiQuestions.length !== answers.length) {\n    //   console.log(\"golgappa\", mbtiQuestions.length);\n    //   dispatch({\n    //     type: SET_TOAST_STATE,\n    //     payload: {\n    //       showToast: true,\n    //       message: \"Please anwers all the questions\",\n    //       toastType: \"warning\",\n    //     },\n    //   });\n    // } else {\n    //   dispatch({ type: \"ANSWER_SUBMITTED\", payload: { answers } });\n    //   localStorage.setItem(\"answers\", JSON.stringify(answers));\n      navigate(\"/student/exam/preview\",{state: {tests: JSON.parse(JSON.stringify(homepagedata.data))}});\n    // }\n    // console.log(answers, \"....\");\n  };\n  const handleQuestionSelection = (e) => {\n    console.log(e);\n  };\n  return (\n    <>\n      <Row gutter={16} className=\"h-100\"> \n        <Col md={16} className=\"p-3\">\n          <Card className=\"h-100\">\n            <h3 className=\"font-weight-bold text-center\">Questions</h3>\n            <hr />\n            <Watermark content=\"MYNDKARE EXAMS\">\n              {mbtiQuestions && mbtiQuestions?.questions.map((question, index) => (\n                <Form.Item key={question._id}>\n                  <p className=\"pt-4 px-4\">\n                    {index + 1}. {question.name}\n                  </p>\n                  <Radio.Group\n                    name=\"radiogroup\"\n                    className=\"p-2 px-5\"\n                    onChange={(e) => selectedOption(e, question._id, index)}\n                    value={answers[index]}\n                  >\n                    {question.options.map((option, index) => (\n                      <Radio\n                        value={index+1}\n                        name=\"radio1\"\n                        key={option}\n                        className=\"my-3\"\n                      >\n                        <div value={index + 1} className=\"p-2 px-5\">\n                        {/* <Divider plain> */}\n\n                          {/* {option.map((mbtiText, index) => ( */}\n                          <p key={option}>{(index + 1)+\". \"+option}</p>\n                          {/* ))} */}\n                          {/* </Divider> */}\n                        </div>\n                      </Radio>\n                    ))}\n                  </Radio.Group>\n                  <hr />\n                </Form.Item>\n              ))}\n            </Watermark>\n            {/* <center className=\"p-2\">\n              <Button className=\"mx-2\" onClick={() => goPrevious()}>\n                Previous\n              </Button>\n              <Button className=\"\" onClick={() => goNext()}>\n                Next\n              </Button>\n            </center> */}\n          </Card>\n        </Col>\n        <Col md={8} className=\"p-3\">\n          <Card className=\"h-100\">\n            <Row gutter={24} className=\"h-100\">\n              <Col md={24}> \n                <h3 className=\"font-weight-bold\">ANSWER STATUS</h3>\n                <hr />\n              </Col>\n              {mbtiQuestions && mbtiQuestions?.questions.map((question, index) => (\n                <Col md={3} key={question._id} className=\"p-2\">\n                  <Button\n                    shape=\"circle\"\n                    value={index + 1} \n                    onClick={(e) => handleQuestionSelection(e.target.value)}\n                  >\n                    {index + 1}\n                  </Button>\n                </Col>\n              ))}\n            </Row>\n            {/* <Countdown\n              title=\"Countdown\"\n              value={countdownValue}\n              onChange={onChange}\n            /> */}\n            <div className=\"submit_btn\">\n              <Button\n                type=\"primary\"\n                htmlType=\"submit\"\n                onClick={() => handleSubmit()}\n                disabled={!submits}\n              >\n                Submit\n              </Button>\n            </div>\n          </Card>\n        </Col>\n      </Row>\n    </>\n  );\n}\n\nexport default ExamQuestions;\n"],"names":["instance","axios","create","baseURL","API_BASE_URL","headers","token","JSON","parse","localStorage","getItem","interceptors","request","use","config","authorization","error","Promise","reject","response","Statistic","Countdown","navigate","useNavigate","_useState","useDispatch","useState","_useState2","_slicedToArray","mbtiQuestions","setMbtiQuestions","_useState3","_useState4","answers","setAnswers","_useState5","_useState6","submits","setSubmits","_useState7","_useState8","answeredques","setAnsweredques","state","useLocation","fetchMBtiQuestions","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_yield$axios$get","data","answersarray","i","wrap","_context","prev","next","get","studentId","examId","sent","questions","length","push","optionSelected","console","log","stringify","stop","apply","arguments","useEffect","selectedOption","_ref2","_callee2","e","_id","questionNumber","liveResponse","answerss","_context2","target","value","questionId","option","post","Object","assign","_x","_x2","_x3","handleSubmit","_ref3","_callee3","submitbody","homepagedata","_context3","tests","_jsx","_Fragment","children","_jsxs","Row","gutter","className","Col","md","Card","Watermark","content","map","question","index","Form","Item","name","Radio","onChange","options","Button","shape","onClick","handleQuestionSelection","type","htmlType","disabled"],"sourceRoot":""}