{"version":3,"file":"static/js/15.67dcf4df.chunk.js","mappings":"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","sources":["axiosConfig.js","pages/StudentPages/ExamQuestionsPage/ExamQuestions.jsx"],"sourcesContent":["import axios from \"axios\";\r\nimport { API_BASE_URL } from \"./constants/constants\";\r\n\r\n// Create an instance of Axios\r\nconst instance = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  headers: {\r\n    \"Content-Type\": \"application/json\",\r\n  },\r\n});\r\nconst token = JSON.parse(localStorage.getItem(\"token\"));\r\n\r\n// Add a request interceptor\r\ninstance.interceptors.request.use(\r\n  (config) => {\r\n    // Modify the request config here, such as adding headers\r\n    if (token) {\r\n      config.headers.authorization = token;\r\n    }\r\n    config.headers[\"Access-Control-Allow-Origin\"] = \"*\";\r\n    return config;\r\n  },\r\n  (error) => {\r\n    // Do something with the request error\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Add a response interceptor\r\ninstance.interceptors.response.use(\r\n  (response) => {\r\n    // Do something with the response data\r\n    return response;\r\n  },\r\n  (error) => {\r\n    // Do something with the response error\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default instance;\r\n","import {\r\n  Button,\r\n  Col,\r\n  Row,\r\n  Card,\r\n  Radio,\r\n  Divider,\r\n  Watermark,\r\n  Statistic,\r\n  Form,\r\n} from \"antd\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nimport SubmitButton from \"../../../components/Buttons/SubmitButton\";\r\nimport axios from \"../../../axiosConfig\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { SET_TOAST_STATE } from \"../../../constants/constants\";\r\n\r\nfunction ExamQuestions() {\r\n  const { Countdown } = Statistic;\r\n  const navigate = useNavigate();\r\n  const dispatch = useDispatch();\r\n  const [questions, setQuestions] = useState();\r\n  const [answers, setAnswers] = useState([]);\r\n  const [answering, setAnswering] = useState(false);\r\n  const [submits, setSubmits] = useState(false);\r\n  const [answeredques, setAnsweredques] = useState();\r\n  const [timeLeft, setTimeLeft] = useState(-1);\r\n  const { state } = useLocation();\r\n  const [isDBDA, setIsDBDA] = useState(false);\r\n  const [answersStatus, setAnswersStatus] = useState(new Map());\r\n  const goNext = () => {};\r\n  const goPrevious = () => {};\r\n\r\n\r\n\r\n  const fetchMBtiQuestions = async () => { \r\n    const { data } = await axios.get(\"/questionsForExam/\"+state.studentId+\"/\"+state.examId);\r\n    let editTSBody = {studentId: state.studentId, examId: state.examId}\r\n    let examStatus = await axios.put(\"/editStartTimestamp\",editTSBody);\r\n    if(data?.dbdaId && data?.dbdaId!=\"\") {\r\n      setIsDBDA(true);\r\n    }\r\n    if(data?.timer) {\r\n      if(examStatus.data.startTime!= null) {\r\n        let startDateTime = Date.parse(examStatus.data.startTime);\r\n        const timeleft = data?.duration - ((Date.now()-startDateTime)/1000);\r\n        if(timeleft>0) {\r\n          setTimeLeft(parseInt(timeleft));\r\n        } else {\r\n          setTimeLeft(0);\r\n        }\r\n      } else {\r\n        setTimeLeft(parseInt(data?.duration));\r\n      }\r\n     } \r\n    let answersarray = [];\r\n    let ansstatus = new Map();\r\n    for(let i=0;i<data?.questions.length;i++) {\r\n      if(data.questions[i].optionSelected && data.questions[i].optionSelected!=0) {\r\n        ansstatus.set(i+1,true);\r\n      } else {\r\n        ansstatus.set(i+1,false);\r\n      }\r\n      answersarray.push(data.questions[i].optionSelected);\r\n    }\r\n    setAnswersStatus(ansstatus);\r\n    setAnsweredques(data?.answeredques);\r\n    setAnswers(answersarray);\r\n    console.log(\"aagya daTA VBC\"+JSON.stringify(data));\r\n    setQuestions(data);\r\n    if(isDBDA || data?.answeredques===data?.questions.length) {\r\n      setSubmits(true);\r\n    } else {\r\n      setSubmits(false);\r\n    }\r\n  };\r\n\r\n  useEffect(()=> {\r\n\r\n    if(timeLeft==0) {\r\n      setAnswering(false);\r\n    }\r\n    else if(timeLeft>0) {\r\n      setTimeout(function () {\r\n       setTimeLeft(timeLeft-1);\r\n      }, 1000);\r\n      setAnswering(true);\r\n    }\r\n    else {\r\n      setAnswering(true);\r\n    }\r\n  }, [timeLeft])\r\n\r\n  useEffect(() => {\r\n    fetchMBtiQuestions();\r\n  }, []);\r\n\r\n  useEffect(() => { \r\n    if(isDBDA || answeredques===questions?.questions.length) { \r\n      setSubmits(true);\r\n    } else {\r\n      setSubmits(false);\r\n    }\r\n  }, [answeredques]);\r\n\r\n  const selectedOption = async (e, _id, questionNumber) => {\r\n    let liveResponse = {studentId: state.studentId, examId: state.examId, questionId: _id, option: e.target.value}\r\n    await axios.post(\"/liveresponse\",liveResponse);\r\n    if(answers[questionNumber]==0) {  \r\n      setAnsweredques(answeredques+1);\r\n    }\r\n    let answerss = [];\r\n    Object.assign(answerss,answers);\r\n    answerss[questionNumber] = e.target.value;\r\n    setAnswers(answerss);\r\n    let ansstatus = answersStatus;\r\n    ansstatus.set(questionNumber+1,true);\r\n    setAnswersStatus(ansstatus);\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    let submitbody = {studentId: state.studentId,examId: state.examId}\r\n    await axios.post(\"/submitExam\",submitbody);\r\n    // let homepagedata = await axios.get(\"getAllTestsExams/\"+state.studentId);\r\n    let testDetails = await axios.get(\"/students/\"+state.studentId);\r\n    // answers.sort((a, b) => a.questionNumber - b.questionNumber);\r\n    // if (questions.length !== answers.length) {\r\n    //   console.log(\"golgappa\", questions.length);\r\n    //   dispatch({\r\n    //     type: SET_TOAST_STATE,\r\n    //     payload: {\r\n    //       showToast: true,\r\n    //       message: \"Please anwers all the questions\",\r\n    //       toastType: \"warning\",\r\n    //     },\r\n    //   });\r\n    // } else {\r\n    //   dispatch({ type: \"ANSWER_SUBMITTED\", payload: { answers } });\r\n    //   localStorage.setItem(\"answers\", JSON.stringify(answers));\r\n      // navigate(\"/student/exam/preview\",{state: {tests: JSON.parse(JSON.stringify(homepagedata.data))}});\r\n      navigate(\"/student/exam/preview\",{state: testDetails?.data});\r\n\r\n      \r\n\r\n  };\r\n  const handleQuestionSelection = (e) => {\r\n  };\r\n  return (\r\n    <>\r\n      <Row gutter={16} className=\"h-100\"> \r\n        <Col md={16} className=\"p-3\">\r\n          <Card className=\"h-100\">\r\n            <h3 className=\"font-weight-bold text-center\">Questions</h3>\r\n            <hr />\r\n            <Watermark content=\"MYNDKARE EXAMS\">\r\n              {questions && questions?.questions.map((question, index) => (\r\n                <Form.Item key={question._id}>\r\n                  {question.images && question.images.length > 0 ?\r\n                    <div>\r\n                      <p className=\"pt-4 px-4\">\r\n                        {index + 1}.\r\n                      </p>\r\n                      <p className=\"pt-4 px-4\">\r\n                        {question.images.map((image, i) =>\r\n                          <img\r\n                            src={\r\n                              image\r\n                            }\r\n                            alt=\"\"\r\n                          />\r\n                        )}\r\n                      </p>\r\n                      <p className=\"pt-4 px-4\">\r\n                        {question.name}\r\n                      </p>\r\n                    </div>\r\n                    :\r\n                    <p className=\"pt-4 px-4\">\r\n                      {index + 1}. {question.name}\r\n                    </p>\r\n                  }\r\n                  \r\n                  <Radio.Group\r\n                    name=\"radiogroup\"\r\n                    className=\"p-2 px-5\"\r\n                    onChange={(e) => selectedOption(e, question._id, index)}\r\n                    value={answers[index]}\r\n                  >\r\n                    {question.options.map((option, index) => (\r\n                      <Radio\r\n                        value={index+1}\r\n                        name=\"radio1\"\r\n                        key={option}\r\n                        className=\"my-3\"\r\n                        disabled = {!answering}\r\n                      >\r\n                        <div value={index + 1} className=\"p-2 px-5\">\r\n                        {/* <Divider plain> */}\r\n\r\n                          {/* {option.map((mbtiText, index) => ( */}\r\n                          <p key={option}>{(index + 1)+\". \"+option}</p>\r\n                          {/* ))} */}\r\n                          {/* </Divider> */}\r\n                        </div>\r\n                      </Radio>\r\n                    ))}\r\n                  </Radio.Group>\r\n                  <hr />\r\n                </Form.Item>\r\n              ))}\r\n            </Watermark>\r\n            {/* <center className=\"p-2\">\r\n              <Button className=\"mx-2\" onClick={() => goPrevious()}>\r\n                Previous\r\n              </Button>\r\n              <Button className=\"\" onClick={() => goNext()}>\r\n                Next\r\n              </Button>\r\n            </center> */}\r\n          </Card>\r\n        </Col>\r\n        <Col md={8} className=\"p-3\">\r\n          <Card className=\"h-100\">\r\n            <Row gutter={24} className=\"h-100\">\r\n              <Col md={24}> \r\n                <h3 className=\"font-weight-bold\">{questions?.name}</h3>\r\n                <hr />\r\n              </Col>\r\n              <Col md={24}> \r\n              {timeLeft>=0 && (\r\n                <>\r\n                  <h4 className=\"font-weight-bold\">\r\n                    Time Left : <span style={{ color: 'red' }}>{timeLeft}</span> Seconds\r\n                  </h4>\r\n                  <hr />\r\n                </>\r\n              )}\r\n              </Col>\r\n              <Col md={24}> \r\n                <h5 className=\"font-weight-bold\">Answer Status</h5>\r\n              </Col>\r\n              {questions && questions?.questions.map((question, index) => (\r\n                <Col md={3} key={question._id} className=\"p-2\">\r\n                  <Button\r\n                    shape=\"circle\"\r\n                    value={index + 1} \r\n                    onClick={(e) => handleQuestionSelection(e.target.value)}\r\n                    style={answersStatus.has(index + 1) && answersStatus.get(index + 1)==true && { backgroundColor: 'green', color: 'white' }} // Customize as needed\r\n                    // disabled\r\n                  >\r\n                    {index + 1} \r\n                  </Button>\r\n                </Col>\r\n              ))}\r\n            </Row>\r\n            {/* <Countdown\r\n              title=\"Countdown\"\r\n              value={countdownValue}\r\n              onChange={onChange}\r\n            /> */}\r\n            <div className=\"submit_btn\">\r\n              <Button\r\n                type=\"primary\"\r\n                htmlType=\"submit\"\r\n                onClick={() => handleSubmit()}\r\n                disabled={!submits}\r\n              >\r\n                Submit\r\n              </Button>\r\n            </div>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ExamQuestions;\r\n"],"names":["instance","axios","create","baseURL","API_BASE_URL","headers","token","JSON","parse","localStorage","getItem","interceptors","request","use","config","authorization","error","Promise","reject","response","Statistic","Countdown","navigate","useNavigate","_useState","useDispatch","useState","_useState2","_slicedToArray","questions","setQuestions","_useState3","_useState4","answers","setAnswers","_useState5","_useState6","answering","setAnswering","_useState7","_useState8","submits","setSubmits","_useState9","_useState10","answeredques","setAnsweredques","_useState11","_useState12","timeLeft","setTimeLeft","state","useLocation","_useState13","_useState14","isDBDA","setIsDBDA","_useState15","Map","_useState16","answersStatus","setAnswersStatus","fetchMBtiQuestions","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_yield$axios$get","data","editTSBody","examStatus","startDateTime","timeleft","answersarray","ansstatus","i","wrap","_context","prev","next","get","studentId","examId","sent","put","dbdaId","timer","startTime","Date","duration","now","parseInt","length","optionSelected","set","push","console","log","stringify","stop","apply","arguments","useEffect","setTimeout","selectedOption","_ref2","_callee2","e","_id","questionNumber","liveResponse","answerss","_context2","questionId","option","target","value","post","Object","assign","_x","_x2","_x3","handleSubmit","_ref3","_callee3","submitbody","testDetails","_context3","_jsx","_Fragment","children","_jsxs","Row","gutter","className","Col","md","Card","Watermark","content","map","question","index","Form","Item","images","image","src","alt","name","Radio","onChange","options","disabled","style","color","Button","shape","onClick","has","backgroundColor","type","htmlType"],"sourceRoot":""}